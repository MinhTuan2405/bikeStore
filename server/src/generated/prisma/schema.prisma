generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["production", "public", "sales"]
}

model brands {
  brand_id   Int        @id @default(autoincrement())
  brand_name String     @db.VarChar(255)
  products   products[]

  @@schema("production")
}

model categories {
  category_id   Int        @id @default(autoincrement())
  category_name String     @db.VarChar(255)
  products      products[]

  @@schema("production")
}

model products {
  product_id   Int           @id @default(autoincrement())
  product_name String        @db.VarChar(255)
  brand_id     Int
  category_id  Int
  model_year   Int           @db.SmallInt
  list_price   Decimal       @db.Decimal(10, 2)
  brands       brands        @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  categories   categories    @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  stocks       stocks[]
  order_items  order_items[]

  @@schema("production")
}

model stocks {
  store_id   Int
  product_id Int
  quantity   Int?
  products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  stores     stores   @relation(fields: [store_id], references: [store_id], onDelete: Cascade)

  @@id([store_id, product_id])
  @@schema("production")
}

model customers {
  customer_id Int      @id @default(autoincrement())
  first_name  String   @db.VarChar(255)
  last_name   String   @db.VarChar(255)
  phone       String?  @db.VarChar(25)
  email       String   @db.VarChar(255)
  street      String?  @db.VarChar(255)
  city        String?  @db.VarChar(50)
  state       String?  @db.VarChar(25)
  zip_code    String?  @db.VarChar(5)
  orders      orders[]

  @@schema("sales")
}

model order_items {
  order_id   Int
  item_id    Int
  product_id Int
  quantity   Int
  list_price Decimal  @db.Decimal(10, 2)
  discount   Decimal  @default(0) @db.Decimal(4, 2)
  orders     orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@id([order_id, item_id])
  @@schema("sales")
}

model orders {
  order_id      Int           @id @default(autoincrement())
  customer_id   Int?
  order_status  Int           @db.SmallInt
  order_date    DateTime      @db.Date
  required_date DateTime      @db.Date
  shipped_date  DateTime?     @db.Date
  store_id      Int
  staff_id      Int
  order_items   order_items[]
  customers     customers?    @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  staffs        staffs        @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  stores        stores        @relation(fields: [store_id], references: [store_id], onDelete: Cascade)

  @@schema("sales")
}

model staffs {
  staff_id     Int      @id @default(autoincrement())
  first_name   String   @db.VarChar(50)
  last_name    String   @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  phone        String?  @db.VarChar(25)
  active       Boolean
  store_id     Int
  manager_id   Int?
  orders       orders[]
  staffs       staffs?  @relation("staffsTostaffs", fields: [manager_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  other_staffs staffs[] @relation("staffsTostaffs")
  stores       stores   @relation(fields: [store_id], references: [store_id], onDelete: Cascade)

  @@schema("sales")
}

model stores {
  store_id   Int      @id @default(autoincrement())
  store_name String   @db.VarChar(255)
  phone      String?  @db.VarChar(25)
  email      String?  @db.VarChar(255)
  street     String?  @db.VarChar(255)
  city       String?  @db.VarChar(255)
  state      String?  @db.VarChar(10)
  zip_code   String?  @db.VarChar(5)
  stocks     stocks[]
  orders     orders[]
  staffs     staffs[]

  @@schema("sales")
}
